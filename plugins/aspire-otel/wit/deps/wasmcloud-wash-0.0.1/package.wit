package wasmcloud:wash@0.0.1;

interface types {
  /// Hook types that can be registered by plugins
  /// Hooks are executed at specific times during the wash lifecycle
  /// and can be used to modify behavior, perform preflight checks, or handle errors.
  enum hook-type {
    /// Default fallback
    unknown,
    /// Called before `wash doctor` runs, useful for preflight checks for plugins
    before-doctor,
    /// Called after `wash doctor` runs, useful to examine results and offer recommendations
    after-doctor,
    /// Called before `wash build` runs
    before-build,
    /// Called after `wash build` runs
    after-build,
    /// Called before `wash push` runs
    before-push,
    /// Called after `wash push` runs
    after-push,
    /// Called before `wash dev` runs and starts the development loop
    before-dev,
    /// Called after `wash dev` ends the development loop
    after-dev,
    /// Called to register a component's exports for use in `wash dev`
    dev-register,
  }

  /// Used for flags and arguments in commands
  /// Flags are registered as `wash <plugin-name> <command-name> --<flag-name> <flag-value>`
  /// Arguments are registered in order as `wash <plugin-name> <command-name> <arg1-value> <arg2-value>`
  ///
  /// Flags and arguments can be optional, and the final value is populated by the CLI parser. If you set default to None,
  /// then the final value should always be Some(value) before the command is executed. This should still be validated.
  record command-argument {
    /// Human readable name for the argument
    name: string,
    /// Short description of the argument
    description: string,
    /// An environment variable that can be used to set this argument. It's strongly recommended to namespace
    /// this value to avoid conflicts with other plugins.
    env: option<string>,
    /// Default value, if any. If omitted, the argument is required. If present, the argument is optional.
    default: option<string>,
    /// Final value for this argument, populated by the CLI parser.
    value: option<string>,
  }

  /// A command is a registered action that can be executed by the user.
  /// Commands are registered as `wash <plugin-name> <command-name>`, and can have flags and arguments.
  record command {
    /// Unique identifier for the command, usually the same as the command name
    id: string,
    /// The command name, registered as `wash <plugin-name> <command-name>`
    name: string,
    /// Short human-friendly description of the command
    description: string,
    /// Command flags, registered as `wash <plugin-name> <command-name> --<flag-name> <flag-value>`
    %flags: list<tuple<string, command-argument>>,
    /// Command positional arguments, registered in order as `wash <plugin-name> <command-name> <arg1-value> <arg2-value>`
    arguments: list<command-argument>,
    /// List of sample command usage
    usage: list<string>,
  }

  /// Metadata for a plugin, used to register the plugin with wash.
  /// This metadata is used to display information about the plugin in the CLI and to register this plugins
  /// place in the wash command lifecycle, including commands and hooks.
  record metadata {
    /// Internal Unique identifier for the plugin
    /// e.g. `dev.wasmcloud.oci`
    id: string,
    /// The plugin name as referred to in the CLI. For this reason, this name should not contain spaces or special characters.
    /// Ex: "oci"
    name: string,
    /// Short human-friendly description of the plugin
    description: string,
    /// The plugin author contact information
    /// This is usually a name and email address
    /// Ex: "WasmCloud Team <team@wasmcloud.dev>"
    contact: string,
    /// Source or Documentation URL for the Plugin
    /// Ex: https://github.com/wasmcloud/wash-oci-plugin
    url: string,
    /// The plugin license
    /// Ex: "Apache-2.0"
    license: string,
    /// The plugin version
    /// Ex: "0.1.0"
    version: string,
    /// The top level command for this plugin.
    /// If set, this plugin will be registered as 'wash <plugin-name>' and will not have a command name.
    /// If omitted, this plugin will be registered as 'wash <plugin-name> <command-name>' for each
    /// command in the `sub-commands` list.
    command: option<command>,
    /// All subcommands for this plugin. If `command` is set, this list should be empty and will be ignored.
    sub-commands: list<command>,
    /// Hooks to register for this plugin. This list opts a plugin into the wash command lifecycle
    hooks: list<hook-type>,
  }

  /// Plugin config is a key/value store that can be used to share information between instances of the plugin.
  /// This is useful for passing information between commands and hooks, or for storing state that's accessed
  /// across multiple invocations of the plugin.
  ///
  /// Plugin config key/value pairs are available both in this object and through wasi:config/runtime calls.
  ///
  /// This is a global store for all instances of the plugin and race contentions should be handled with care.
  /// The contents of the store are not persisted after wash's execution ends.
  resource plugin-config {
    /// Get the value for a given key in the plugin config.
    get: func(key: string) -> option<string>;
    /// Set the value for a given plugin config key. Returns the value if it already existed, or none if it was newly created.
    set: func(key: string, value: string) -> option<string>;
    /// Delete the value for a given key in the plugin config, if it exists.
    /// Returns the deleted value if it existed, or none if it did not.
    delete: func(key: string) -> option<string>;
    /// List all keys in the plugin config.
    %list: func() -> list<string>;
  }

  /// TODO(ISSUE#5): Expose project configuration to plugins
  resource project-config {
    /// Current wash version
    /// Ex: 0.39.3
    version: func() -> string;
  }

  /// Shared context between the plugin and wash, enabling both to read and write key/value pairs
  /// for dynamic behavior modification. This allows plugins to influence wash operations by updating
  /// context values (e.g., modifying OCI artifact annotations before a push).
  ///
  /// The context is accessible to both wash and plugins during command and hook execution, supporting
  /// collaborative state changes and behavioral overrides.
  ///
  /// Context data is not persisted beyond the current wash execution and should be treated as ephemeral.
  resource context {
    /// Get the value for a given context key.
    /// Ex: After wash build: context.get("tinygo.path") -> "/opt/homebrew/bin/tinygo"
    get: func(key: string) -> option<string>;
    /// Set the value for a given context key. Returns the value if it already existed, or none if it was newly created.
    /// Ex: Before wash push: context.set("oci.annotations", "foo=bar")
    set: func(key: string, value: string) -> option<string>;
    /// Delete the value for a given context key, if it exists. Can be used to remove keys from the context.
    /// Returns the deleted value if it existed, or none if it did not.
    /// Ex: Before wash push: context.delete("oci.password")
    delete: func(key: string) -> option<string>;
    /// List all keys in the context.
    %list: func() -> list<string>;
  }

  /// The runner resource provides access to the wash runtime and its configuration.
  /// It allows plugins to interact with the wash environment, execute commands, and manage configuration.
  resource runner {
    /// Project configuration is provided when running in a project context, for example during the `build` or `dev`
    /// commands. If the plugin is not running in a project context, this will return none.
    /// project-config: func() -> option<project-config>;
    /// Shared context between the plugin and wash, enabling both to read and write key/value pairs
    /// for dynamic behavior modification. This allows plugins to influence wash operations by updating
    /// context values (e.g., modifying OCI artifact annotations before a push).
    ///
    /// The context is accessible to both wash and plugins during command and hook execution, supporting
    /// collaborative state changes and behavioral overrides.
    context: func() -> result<context, string>;
    /// Plugin config is a key/value store that can be used to share information between instances of the plugin.
    /// This is useful for passing information between commands and hooks, or for storing state that's accessed
    /// across multiple invocations of the plugin.
    ///
    /// Plugin config key/value pairs are available both in this object and through wasi:config/runtime calls.
    ///
    /// This is a global store for all instances of the plugin and race contentions should be handled with care.
    /// The contents of the store are not persisted after wash's execution ends.
    plugin-config: func() -> result<plugin-config, string>;
    /// Executes a host native binary on behalf of a plugin
    /// Commands are executed under 'sh -c' and inherit the environment and working directory.
    /// wash will ask the user for confirmation before executing this function.
    ///
    /// Returns the stdout and stderr of the command as a tuple.
    host-exec: func(bin: string, args: list<string>) -> result<tuple<string, string>, string>;
    /// Executes a host native binary on behalf of a plugin in the background.
    /// Commands are executed under 'sh -c' and inherit the environment and working directory.
    /// wash will ask the user for confirmation before executing this function.
    ///
    /// The lifecycle of this command is tied to the CLI execution context. This means it will
    /// continue to run until the CLI session ends and then be killed.
    host-exec-background: func(bin: string, args: list<string>) -> result<_, string>;
    /// TODO(IMPORTANT): No wasi:logging, fix this up for how we want to do output
    /// User visible Output
    /// For debugging, see wasi:logging
    output: func(message: string);
    /// User visible Output
    /// For debugging, see wasi:logging
    structured-output: func(headers: list<string>, rows: list<list<string>>);
    /// Stop execution
    /// wash will notify the user and execute the error hooks (if any)
    error: func(reason: string);
  }
}

interface plugin {
  use types.{metadata, runner, command, hook-type};

  /// Called by wash to retrieve the plugin metadata. It's recommended to avoid
  /// any computation or logging in this function as it's called on each command execution.
  info: func() -> metadata;

  /// Called before any commands or hooks are executed so that the plugin could take preflight actions
  /// such as checking the environment, validating configuration, or preparing resources. Note that
  /// any in-memory state will _not_ be persisted in this component, and the plugin-config store
  /// should be used for any state that needs to be shared across commands or hooks.
  initialize: func(runner: runner) -> result<string, string>;

  /// Handle the execution of a given command. The resulting value should be the string that will
  /// be printed to the user, or an error message if the command failed.
  run: func(runner: runner, cmd: command) -> result<string, string>;

  /// Handle the execution of a given hook type. The resulting value should be the string that will
  /// be printed to the user, or an error message if the hook failed.
  hook: func(runner: runner, hook: hook-type) -> result<string, string>;
}

/// The world for exported bindings for wash plugins. Exporting the plugin interface is the
/// only requirement for a component to be used as a plugin in wash.
world wash-plugin {
  import types;

  export plugin;
}
/// An example world showing the list of interfaces that are available to plugins.
world plugin-guest {
  import wasi:logging/logging@0.1.0-draft;
  import wasi:cli/environment@0.2.0;
  import wasi:cli/exit@0.2.0;
  import wasi:io/error@0.2.0;
  import wasi:io/poll@0.2.0;
  import wasi:io/streams@0.2.0;
  import wasi:cli/stdin@0.2.0;
  import wasi:cli/stdout@0.2.0;
  import wasi:cli/stderr@0.2.0;
  import wasi:cli/terminal-input@0.2.0;
  import wasi:cli/terminal-output@0.2.0;
  import wasi:cli/terminal-stdin@0.2.0;
  import wasi:cli/terminal-stdout@0.2.0;
  import wasi:cli/terminal-stderr@0.2.0;
  import wasi:clocks/monotonic-clock@0.2.0;
  import wasi:clocks/wall-clock@0.2.0;
  import wasi:filesystem/types@0.2.0;
  import wasi:filesystem/preopens@0.2.0;
  import wasi:sockets/network@0.2.0;
  import wasi:sockets/instance-network@0.2.0;
  import wasi:sockets/udp@0.2.0;
  import wasi:sockets/udp-create-socket@0.2.0;
  import wasi:sockets/tcp@0.2.0;
  import wasi:sockets/tcp-create-socket@0.2.0;
  import wasi:sockets/ip-name-lookup@0.2.0;
  import wasi:random/random@0.2.0;
  import wasi:random/insecure@0.2.0;
  import wasi:random/insecure-seed@0.2.0;
  import types;

  export plugin;
}
/// An example world of a plugin that can be used in the hot reload loop, namely exporting the HTTP bindings
world dev {
  import wasi:logging/logging@0.1.0-draft;
  import wasi:io/poll@0.2.0;
  import wasi:clocks/monotonic-clock@0.2.0;
  import wasi:io/error@0.2.0;
  import wasi:io/streams@0.2.0;
  import wasi:http/types@0.2.0;

  export wasi:http/incoming-handler@0.2.0;
}

// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package types represents the imported interface "wasmcloud:wash/types@0.0.1".
package types

import (
	"go.bytecodealliance.org/cm"
)

// HookType represents the enum "wasmcloud:wash/types@0.0.1#hook-type".
//
// Hook types that can be registered by plugins
// Hooks are executed at specific times during the wash lifecycle
// and can be used to modify behavior, perform preflight checks, or handle errors.
//
//	enum hook-type {
//		unknown,
//		before-doctor,
//		after-doctor,
//		before-build,
//		after-build,
//		before-push,
//		after-push,
//		before-dev,
//		after-dev,
//		dev-register
//	}
type HookType uint8

const (
	// Default fallback
	HookTypeUnknown HookType = iota

	// Called before `wash doctor` runs, useful for preflight checks for plugins
	HookTypeBeforeDoctor

	// Called after `wash doctor` runs, useful to examine results and offer recommendations
	HookTypeAfterDoctor

	// Called before `wash build` runs
	HookTypeBeforeBuild

	// Called after `wash build` runs
	HookTypeAfterBuild

	// Called before `wash push` runs
	HookTypeBeforePush

	// Called after `wash push` runs
	HookTypeAfterPush

	// Called before `wash dev` runs and starts the development loop
	HookTypeBeforeDev

	// Called after `wash dev` ends the development loop
	HookTypeAfterDev

	// Called to register a component's exports for use in `wash dev`
	HookTypeDevRegister
)

var stringsHookType = [10]string{
	"unknown",
	"before-doctor",
	"after-doctor",
	"before-build",
	"after-build",
	"before-push",
	"after-push",
	"before-dev",
	"after-dev",
	"dev-register",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e HookType) String() string {
	return stringsHookType[e]
}

// CommandArgument represents the record "wasmcloud:wash/types@0.0.1#command-argument".
//
// Used for flags and arguments in commands
// Flags are registered as `wash <plugin-name> <command-name> --<flag-name> <flag-value>`
// Arguments are registered in order as `wash <plugin-name> <command-name> <arg1-value>
// <arg2-value>`
//
// Flags and arguments can be optional, and the final value is populated by the CLI
// parser. If you set default to None,
// then the final value should always be Some(value) before the command is executed.
// This should still be validated.
//
//	record command-argument {
//		name: string,
//		description: string,
//		env: option<string>,
//		default: option<string>,
//		value: option<string>,
//	}
type CommandArgument struct {
	_ cm.HostLayout
	// Human readable name for the argument
	Name string

	// Short description of the argument
	Description string

	// An environment variable that can be used to set this argument. It's strongly recommended
	// to namespace
	// this value to avoid conflicts with other plugins.
	Env cm.Option[string]

	// Default value, if any. If omitted, the argument is required. If present, the argument
	// is optional.
	Default cm.Option[string]

	// Final value for this argument, populated by the CLI parser.
	Value cm.Option[string]
}

// Command represents the record "wasmcloud:wash/types@0.0.1#command".
//
// A command is a registered action that can be executed by the user.
// Commands are registered as `wash <plugin-name> <command-name>`, and can have flags
// and arguments.
//
//	record command {
//		id: string,
//		name: string,
//		description: string,
//		%flags: list<tuple<string, command-argument>>,
//		arguments: list<command-argument>,
//		usage: list<string>,
//	}
type Command struct {
	_ cm.HostLayout
	// Unique identifier for the command, usually the same as the command name
	ID string

	// The command name, registered as `wash <plugin-name> <command-name>`
	Name string

	// Short human-friendly description of the command
	Description string

	// Command flags, registered as `wash <plugin-name> <command-name> --<flag-name> <flag-value>`
	Flags cm.List[cm.Tuple[string, CommandArgument]]

	// Command positional arguments, registered in order as `wash <plugin-name> <command-name>
	// <arg1-value> <arg2-value>`
	Arguments cm.List[CommandArgument]

	// List of sample command usage
	Usage cm.List[string]
}

// Metadata represents the record "wasmcloud:wash/types@0.0.1#metadata".
//
// Metadata for a plugin, used to register the plugin with wash.
// This metadata is used to display information about the plugin in the CLI and to
// register this plugins
// place in the wash command lifecycle, including commands and hooks.
//
//	record metadata {
//		id: string,
//		name: string,
//		description: string,
//		contact: string,
//		url: string,
//		license: string,
//		version: string,
//		command: option<command>,
//		sub-commands: list<command>,
//		hooks: list<hook-type>,
//	}
type Metadata struct {
	_ cm.HostLayout
	// Internal Unique identifier for the plugin
	// e.g. `dev.wasmcloud.oci`
	ID string

	// The plugin name as referred to in the CLI. For this reason, this name should not
	// contain spaces or special characters.
	// Ex: "oci"
	Name string

	// Short human-friendly description of the plugin
	Description string

	// The plugin author contact information
	// This is usually a name and email address
	// Ex: "WasmCloud Team <team@wasmcloud.dev>"
	Contact string

	// Source or Documentation URL for the Plugin
	// Ex: https://github.com/wasmcloud/wash-oci-plugin
	URL string

	// The plugin license
	// Ex: "Apache-2.0"
	License string

	// The plugin version
	// Ex: "0.1.0"
	Version string

	// The top level command for this plugin.
	// If set, this plugin will be registered as 'wash <plugin-name>' and will not have
	// a command name.
	// If omitted, this plugin will be registered as 'wash <plugin-name> <command-name>'
	// for each
	// command in the `sub-commands` list.
	Command cm.Option[Command]

	// All subcommands for this plugin. If `command` is set, this list should be empty
	// and will be ignored.
	SubCommands cm.List[Command]

	// Hooks to register for this plugin. This list opts a plugin into the wash command
	// lifecycle
	Hooks cm.List[HookType]
}

// PluginConfig represents the imported resource "wasmcloud:wash/types@0.0.1#plugin-config".
//
// Plugin config is a key/value store that can be used to share information between
// instances of the plugin.
// This is useful for passing information between commands and hooks, or for storing
// state that's accessed
// across multiple invocations of the plugin.
//
// Plugin config key/value pairs are available both in this object and through wasi:config/runtime
// calls.
//
// This is a global store for all instances of the plugin and race contentions should
// be handled with care.
// The contents of the store are not persisted after wash's execution ends.
//
//	resource plugin-config
type PluginConfig cm.Resource

// ResourceDrop represents the imported resource-drop for resource "plugin-config".
//
// Drops a resource handle.
//
//go:nosplit
func (self PluginConfig) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_PluginConfigResourceDrop((uint32)(self0))
	return
}

// Delete represents the imported method "delete".
//
// Delete the value for a given key in the plugin config, if it exists.
// Returns the deleted value if it existed, or none if it did not.
//
//	delete: func(key: string) -> option<string>
//
//go:nosplit
func (self PluginConfig) Delete(key string) (result cm.Option[string]) {
	self0 := cm.Reinterpret[uint32](self)
	key0, key1 := cm.LowerString(key)
	wasmimport_PluginConfigDelete((uint32)(self0), (*uint8)(key0), (uint32)(key1), &result)
	return
}

// Get represents the imported method "get".
//
// Get the value for a given key in the plugin config.
//
//	get: func(key: string) -> option<string>
//
//go:nosplit
func (self PluginConfig) Get(key string) (result cm.Option[string]) {
	self0 := cm.Reinterpret[uint32](self)
	key0, key1 := cm.LowerString(key)
	wasmimport_PluginConfigGet((uint32)(self0), (*uint8)(key0), (uint32)(key1), &result)
	return
}

// List represents the imported method "list".
//
// List all keys in the plugin config.
//
//	%list: func() -> list<string>
//
//go:nosplit
func (self PluginConfig) List() (result cm.List[string]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_PluginConfigList((uint32)(self0), &result)
	return
}

// Set represents the imported method "set".
//
// Set the value for a given plugin config key. Returns the value if it already existed,
// or none if it was newly created.
//
//	set: func(key: string, value: string) -> option<string>
//
//go:nosplit
func (self PluginConfig) Set(key string, value string) (result cm.Option[string]) {
	self0 := cm.Reinterpret[uint32](self)
	key0, key1 := cm.LowerString(key)
	value0, value1 := cm.LowerString(value)
	wasmimport_PluginConfigSet((uint32)(self0), (*uint8)(key0), (uint32)(key1), (*uint8)(value0), (uint32)(value1), &result)
	return
}

// ProjectConfig represents the imported resource "wasmcloud:wash/types@0.0.1#project-config".
//
// TODO(ISSUE#5): Expose project configuration to plugins
//
//	resource project-config
type ProjectConfig cm.Resource

// ResourceDrop represents the imported resource-drop for resource "project-config".
//
// Drops a resource handle.
//
//go:nosplit
func (self ProjectConfig) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ProjectConfigResourceDrop((uint32)(self0))
	return
}

// Version represents the imported method "version".
//
// Current wash version
// Ex: 0.39.3
//
//	version: func() -> string
//
//go:nosplit
func (self ProjectConfig) Version() (result string) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ProjectConfigVersion((uint32)(self0), &result)
	return
}

// Context represents the imported resource "wasmcloud:wash/types@0.0.1#context".
//
// Shared context between the plugin and wash, enabling both to read and write key/value
// pairs
// for dynamic behavior modification. This allows plugins to influence wash operations
// by updating
// context values (e.g., modifying OCI artifact annotations before a push).
//
// The context is accessible to both wash and plugins during command and hook execution,
// supporting
// collaborative state changes and behavioral overrides.
//
// Context data is not persisted beyond the current wash execution and should be treated
// as ephemeral.
//
//	resource context
type Context cm.Resource

// ResourceDrop represents the imported resource-drop for resource "context".
//
// Drops a resource handle.
//
//go:nosplit
func (self Context) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ContextResourceDrop((uint32)(self0))
	return
}

// Delete represents the imported method "delete".
//
// Delete the value for a given context key, if it exists. Can be used to remove keys
// from the context.
// Returns the deleted value if it existed, or none if it did not.
// Ex: Before wash push: context.delete("oci.password")
//
//	delete: func(key: string) -> option<string>
//
//go:nosplit
func (self Context) Delete(key string) (result cm.Option[string]) {
	self0 := cm.Reinterpret[uint32](self)
	key0, key1 := cm.LowerString(key)
	wasmimport_ContextDelete((uint32)(self0), (*uint8)(key0), (uint32)(key1), &result)
	return
}

// Get represents the imported method "get".
//
// Get the value for a given context key.
// Ex: After wash build: context.get("tinygo.path") -> "/opt/homebrew/bin/tinygo"
//
//	get: func(key: string) -> option<string>
//
//go:nosplit
func (self Context) Get(key string) (result cm.Option[string]) {
	self0 := cm.Reinterpret[uint32](self)
	key0, key1 := cm.LowerString(key)
	wasmimport_ContextGet((uint32)(self0), (*uint8)(key0), (uint32)(key1), &result)
	return
}

// List represents the imported method "list".
//
// List all keys in the context.
//
//	%list: func() -> list<string>
//
//go:nosplit
func (self Context) List() (result cm.List[string]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ContextList((uint32)(self0), &result)
	return
}

// Set represents the imported method "set".
//
// Set the value for a given context key. Returns the value if it already existed,
// or none if it was newly created.
// Ex: Before wash push: context.set("oci.annotations", "foo=bar")
//
//	set: func(key: string, value: string) -> option<string>
//
//go:nosplit
func (self Context) Set(key string, value string) (result cm.Option[string]) {
	self0 := cm.Reinterpret[uint32](self)
	key0, key1 := cm.LowerString(key)
	value0, value1 := cm.LowerString(value)
	wasmimport_ContextSet((uint32)(self0), (*uint8)(key0), (uint32)(key1), (*uint8)(value0), (uint32)(value1), &result)
	return
}

// Runner represents the imported resource "wasmcloud:wash/types@0.0.1#runner".
//
// The runner resource provides access to the wash runtime and its configuration.
// It allows plugins to interact with the wash environment, execute commands, and
// manage configuration.
//
//	resource runner
type Runner cm.Resource

// ResourceDrop represents the imported resource-drop for resource "runner".
//
// Drops a resource handle.
//
//go:nosplit
func (self Runner) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_RunnerResourceDrop((uint32)(self0))
	return
}

// Context represents the imported method "context".
//
// Project configuration is provided when running in a project context, for example
// during the `build` or `dev`
// commands. If the plugin is not running in a project context, this will return none.
// project-config: func() -> option<project-config>;
// Shared context between the plugin and wash, enabling both to read and write key/value
// pairs
// for dynamic behavior modification. This allows plugins to influence wash operations
// by updating
// context values (e.g., modifying OCI artifact annotations before a push).
//
// The context is accessible to both wash and plugins during command and hook execution,
// supporting
// collaborative state changes and behavioral overrides.
//
//	context: func() -> result<context, string>
//
//go:nosplit
func (self Runner) Context() (result cm.Result[string, Context, string]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_RunnerContext((uint32)(self0), &result)
	return
}

// Error represents the imported method "error".
//
// Stop execution
// wash will notify the user and execute the error hooks (if any)
//
//	error: func(reason: string)
//
//go:nosplit
func (self Runner) Error(reason string) {
	self0 := cm.Reinterpret[uint32](self)
	reason0, reason1 := cm.LowerString(reason)
	wasmimport_RunnerError((uint32)(self0), (*uint8)(reason0), (uint32)(reason1))
	return
}

// HostExec represents the imported method "host-exec".
//
// Executes a host native binary on behalf of a plugin
// Commands are executed under 'sh -c' and inherit the environment and working directory.
// wash will ask the user for confirmation before executing this function.
//
// Returns the stdout and stderr of the command as a tuple.
//
//	host-exec: func(bin: string, args: list<string>) -> result<tuple<string, string>,
//	string>
//
//go:nosplit
func (self Runner) HostExec(bin string, args cm.List[string]) (result cm.Result[[2]string, [2]string, string]) {
	self0 := cm.Reinterpret[uint32](self)
	bin0, bin1 := cm.LowerString(bin)
	args0, args1 := cm.LowerList(args)
	wasmimport_RunnerHostExec((uint32)(self0), (*uint8)(bin0), (uint32)(bin1), (*string)(args0), (uint32)(args1), &result)
	return
}

// Output represents the imported method "output".
//
// Executes a host native binary on behalf of a plugin in the background.
// Commands are executed under 'sh -c' and inherit the environment and working directory.
// wash will ask the user for confirmation before executing this function.
//
// The lifecycle of this command is tied to the CLI execution context. This means
// it will
// continue to run until the CLI session ends and then be killed.
// @since(version = 0.0.2)
// host-exec-background: func(bin: string, args: list<string>) -> result<_, string>;
// TODO(IMPORTANT): No wasi:logging, fix this up for how we want to do output
// User visible Output
// For debugging, see wasi:logging
//
//	output: func(message: string)
//
//go:nosplit
func (self Runner) Output(message string) {
	self0 := cm.Reinterpret[uint32](self)
	message0, message1 := cm.LowerString(message)
	wasmimport_RunnerOutput((uint32)(self0), (*uint8)(message0), (uint32)(message1))
	return
}

// PluginConfig represents the imported method "plugin-config".
//
// Plugin config is a key/value store that can be used to share information between
// instances of the plugin.
// This is useful for passing information between commands and hooks, or for storing
// state that's accessed
// across multiple invocations of the plugin.
//
// Plugin config key/value pairs are available both in this object and through wasi:config/runtime
// calls.
//
// This is a global store for all instances of the plugin and race contentions should
// be handled with care.
// The contents of the store are not persisted after wash's execution ends.
//
//	plugin-config: func() -> result<plugin-config, string>
//
//go:nosplit
func (self Runner) PluginConfig() (result cm.Result[string, PluginConfig, string]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_RunnerPluginConfig((uint32)(self0), &result)
	return
}

// StructuredOutput represents the imported method "structured-output".
//
// User visible Output
// For debugging, see wasi:logging
//
//	structured-output: func(headers: list<string>, rows: list<list<string>>)
//
//go:nosplit
func (self Runner) StructuredOutput(headers cm.List[string], rows cm.List[cm.List[string]]) {
	self0 := cm.Reinterpret[uint32](self)
	headers0, headers1 := cm.LowerList(headers)
	rows0, rows1 := cm.LowerList(rows)
	wasmimport_RunnerStructuredOutput((uint32)(self0), (*string)(headers0), (uint32)(headers1), (*cm.List[string])(rows0), (uint32)(rows1))
	return
}
